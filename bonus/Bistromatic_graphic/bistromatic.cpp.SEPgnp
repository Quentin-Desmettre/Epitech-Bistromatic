#include "bistromatic.h"
#include "ui_bistromatic.h"
#include <QLabel>
#include <QPushButton>
#include <QFile>

bistromatic::bistromatic(QWidget *parent) :
    QWidget(parent),
    erasable(false),
    ui(new Ui::bistromatic)
{
    ui->setupUi(this);
    setWindowTitle("Bistromatic");
    ui->results->setMaximumHeight(height() / 3);
    path = "/home/qdes/Epitech/Tek1/C_Pool/Projects/B-CPE-101-LIL-1-1-bistromatic-quentin.desmettre/bonus/calc";

    QFont font;
    ui->results->setMaximumHeight(height() / 3);
    for (int i = 0; i < 20; i++) {
        font  = ui->gridLayout->itemAt(i)->widget()->font();
        font.setPixelSize(font.pixelSize() + 30);
        ui->gridLayout->itemAt(i)->widget()->setFont(font);
        ui->gridLayout->itemAt(i)->widget()->setMaximumHeight((height() - ui->results->height())/5);
    }
    font = ui->results->font();
    font.setPixelSize(font.pixelSize() + 30);
    ui->results->setReadOnly(true);
}

void bistromatic::resizeEvent(QResizeEvent *event)
{
    QFont font;
    ui->results->setMaximumHeight(height() / 3);
    for (int i = 0; i < 20; i++) {
        font  = ui->gridLayout->itemAt(i)->widget()->font();
        font.setPixelSize(font.pixelSize() + 30);
        ui->gridLayout->itemAt(i)->widget()->setFont(font);
        ui->gridLayout->itemAt(i)->widget()->setMaximumHeight((height() - ui->results->height())/5);
    }
    font = ui->results->font();
    font.setPixelSize(font.pixelSize() + 30);
}

void bistromatic::do_action() {
    QPushButton *origin = qobject_cast<QPushButton*>(sender());
    QString text;

    if (!origin)
        return;
    text = origin->text();
    if (text == "Quit")
        qApp->exit(0);
    else if (text == "<-") {
        if (!erasable)
            return;
        m_expr.chop(1);
        global_text.chop(1);
        erasable = m_expr.size() != 0;
        ui->results->setPlainText(global_text);
    }
    else if (text == "Clear") {
        m_expr = "";
        global_text = "";
        ui->results->setPlainText("");
        erasable = false;
    }
    else if (text == "=") {
        compute(m_expr);
        erasable = false;
        m_expr = "";
    }
    else {
        m_expr += text[0];
        global_text += text[0];
        ui->results->setPlainText(global_text);
        erasable = true;
    }

}
void bistromatic::compute(QString expr){
    if (expr.size() == 0)
        return;
    QString final_expr = " " + expr + " ";
    system((path + final_expr + " > /home/qdes/Bistromatic/output").toStdString().c_str());
    QFile output("/home/qdes/Bistromatic/output");
    if (output.open(QIODevice::ReadOnly | QIODevice::Text)){
        global_text += "\n" + output.readLine() + "\n";
        ui->results->setPlainText(global_text);
    }
    else
        ui->results->setPlainText("ERROR");
}

bistromatic::~bistromatic()
{
    delete ui;
}
